resources:
  repositories:
    - repository: self
      checkoutOptions:
        submodules: true
        lfs: true
trigger:
  branches:
    include:
      - master
      - develop
      - feature/*
      - bugfix/*
variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  BuildPlatform: Any CPU
  BuildConfiguration: Release

jobs:
- job: Setup
  pool:
    vmImage: ubuntu-latest
  steps:
  - powershell: |
      dotnet tool install --tool-path .. gitversion.tool
    displayName: Installing Dotnet Tools

  - powershell: |
      $git = $(../dotnet-gitversion /output json /showvariable NugetVersion)
      echo "##vso[task.setvariable variable=gitVersion;isOutput=true]$(../dotnet-gitversion /output json /showvariable NugetVersion)"
    name: versioning
    displayName: Setting version from git

  - powershell: |
      echo "Current version: $(versioning.gitVersion)"
    name: versionDisplay
    displayName: Shows currently compiling version

  - task: DotNetCoreCLI@2
    name: dotnetRestore
    displayName: Restoring nugets
    inputs:
      command: 'restore'
      arguments: -Project2ProjectTimeOut 20 --packages $(Pipeline.Workspace)/.nuget
      verbosityRestore: Normal

- job: Building
  pool:
    vmImage: ubuntu-latest
  dependsOn:
    - Setup
  variables:
    Version: $[ dependencies.Setup.outputs['versioning.gitVersion'] ]
  steps:
  - checkout: self
    fetchDepth: 1

  - task: DotNetCoreCLI@2
    name: dotnetRestore
    displayName: Restoring nugets
    inputs:
      command: 'restore'
      arguments: -Project2ProjectTimeOut 20 --packages $(Pipeline.Workspace)/.nuget
      verbosityRestore: Normal

  - task: DotNetCoreCLI@2
    name: dotnetBuild
    displayName: Building Projects
    inputs:
      command: build
      projects: src/*/*.csproj
      configuration: $(BuildConfiguration)
      arguments: -o $(Pipeline.Workspace)/build
      versioningScheme: byEnvVar
      versionEnvVar: Version


  - task: DotNetCoreCLI@2
    name: dotnetPack
    displayName: Packing as Nugets
    inputs:
      command: pack
      arguments: --no-build
      searchPatternPack: 'src/*/*.csproj'
      configuration: $(BuildConfiguration)
      versioningScheme: byEnvVar
      versionEnvVar: Version
      verbosityPack: normal
      restoreDirectory: $(Pipeline.Workspace)/.nuget
      packDirectory: $(Pipeline.Workspace)/nuget

- job: Testing
  pool:
    vmImage: ubuntu-latest
  dependsOn:
    - Setup
  variables:
    Version: $[ dependencies.Setup.outputs['versioning.gitVersion'] ]
  steps:
  - checkout: self
    fetchDepth: 1

  - task: DotNetCoreCLI@2
    name: dotnetRestore
    displayName: Restoring nugets
    inputs:
      command: 'restore'
      arguments: -Project2ProjectTimeOut 20 --packages "$(Pipeline.Workspace)/.nuget)
      verbosityRestore: Normal

  - powershell: |
      echo "Version is: $(Version)"

- job: Publishing
  pool:
    vmImage: ubuntu-latest
  dependsOn:
    - Setup
    - Building
    - Testing
  variables:
    Version: $[ dependencies.Setup.outputs['versioning.gitVersion'] ]
  steps:
  - checkout: none

  - task: PublishBuildArtifacts@1
    name: publish
    displayName: Publish build artifacts
    inputs:
      PathtoPublish: $(Pipeline.Workspace)/build
      ArtifactName: 'drop'
