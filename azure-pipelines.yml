resources:
  repositories:
    - repository: self
      checkoutOptions:
        submodules: true
        lfs: true
trigger:
  batch: true
  branches:
    include:
      - master
      - develop
      - feature/*
      - bugfix/*
      - release/*
  paths:
    include:
      - azure-pipelines.yml
      - src/*
      - tests/*
variables:
  - group: Environment
  - name: SonarCloudProject
    value: akritikos_ProvingGrounds

jobs:
- job: Setup
  pool:
    vmImage: windows-latest
  steps:
  - task: DotNetCoreCLI@2
    displayName: Restoring nugets
    inputs:
      command: 'restore'
      noCache: false
      restoreDirectory: '$(Pipeline.Workspace)/.nuget/packages'
      arguments: -Project2ProjectTimeOut 20
      verbosityRestore: Normal

  - task: PowerShell@2
    inputs:
      targetType: inline
      script: |
        dotnet tool install --tool-path .. gitversion.tool
      pwsh: true
    displayName: Installing Dotnet Tools

  - task: PowerShell@2
    inputs:
      targetType: inline
      script: |
        echo "##vso[task.setvariable variable=gitVersion;isOutput=true]$(../dotnet-gitversion /output json /showvariable SemVer)"
        echo "Current version: $(../dotnet-gitversion /output json /showvariable NugetVersion)"
      pwsh: true
    displayName: Setting version from git
    name: versioning

- job: Building
  pool:
    vmImage: ubuntu-latest
  dependsOn:
    - Setup
  variables:
    Version: $[ dependencies.Setup.outputs['versioning.gitVersion'] ]
  steps:
  - checkout: self
    fetchDepth: 1

  - task: DotNetCoreCLI@2
    displayName: Restoring nugets
    inputs:
      command: 'restore'
      noCache: false
      restoreDirectory: '$(Pipeline.Workspace)/.nuget/packages'
      arguments: -Project2ProjectTimeOut 20
      verbosityRestore: Normal

  - task: DotNetCoreCLI@2
    displayName: Building Projects
    inputs:
      command: build
      configuration: $(BuildConfiguration)
      arguments: -o $(build.artifactStagingDirectory)/build
      versioningScheme: byEnvVar
      versionEnvVar: Version

  - task: PublishBuildArtifacts@1
    displayName: Publish build artifacts
    inputs:
      PathtoPublish: $(build.artifactStagingDirectory)/build
      ArtifactName: 'drop'

  - task: DotNetCoreCLI@2
    displayName: Packing as Nugets
    inputs:
      command: pack
      searchPatternPack: 'src/*/*.csproj'
      configuration: $(BuildConfiguration)
      versioningScheme: byEnvVar
      versionEnvVar: Version
      verbosityPack: normal
      packDirectory: $(build.artifactStagingDirectory)/nuget

  - task: PublishBuildArtifacts@1
    name: publishNuget
    displayName: Publish nugets
    inputs:
      PathtoPublish: $(build.artifactStagingDirectory)/nuget
      ArtifactName: 'nuget'

- job: Testing
  pool:
    vmImage: ubuntu-latest
  dependsOn:
    - Setup
  variables:
    Version: $[ dependencies.Setup.outputs['versioning.gitVersion'] ]
    GITHUB_KEY: $(GitHubApiKey)
    SONAR_ORGANIZATION: $(SonarCloudOrganization)
    SONAR_APIKEY: $(SonarCloudApiKey)
    SONAR_URL: $(SonarCloudHost)
  steps:
  - checkout: self
    fetchDepth: 1

  - task: DotNetCoreCLI@2
    displayName: Restoring nugets
    inputs:
      command: 'restore'
      noCache: false
      restoreDirectory: '$(Pipeline.Workspace)/.nuget/packages'
      arguments: -Project2ProjectTimeOut 20
      verbosityRestore: Normal

  - task: PowerShell@2
    inputs:
      targetType: inline
      script: |
        dotnet tool install --tool-path .. dotnet-sonarscanner
      pwsh: true
    displayName: Installing SonarCloud scanner

  - task: PowerShell@2
    condition: ne(variables['Build.Reason'], 'PullRequest')
    inputs:
      targetType: inline
      script: |
        ../dotnet-sonarscanner begin /k:"$(SonarCloudProject)" /v:"$(Version)" /o:"$(SONAR_ORGANIZATION)" /d:sonar.host.url="$(SONAR_URL)" /d:sonar.login="$(SONAR_APIKEY)" /d:sonar.cs.opencover.reportsPaths="$(build.artifactStagingDirectory)/coverage" /d:sonar.branch.name="$(Build.SourceBranchName)" /d:sonar.github.repository="$(Build.Repository.Name)" /d:sonar.github.oauth=$(GITHUB_KEY)
      pwsh: true
    displayName: Scans project using SonarCloud on normal commits

  - task: PowerShell@2
    condition: eq(variables['Build.Reason'], 'PullRequest')
    inputs:
      targetType: inline
      script: |
        ../dotnet-sonarscanner begin /k:"$(SonarCloudProject)" /v:"$(Version)" /o:"$(SONAR_ORGANIZATION)" /d:sonar.host.url="$(SONAR_URL)" /d:sonar.login="$(SONAR_APIKEY)" /d:sonar.cs.opencover.reportsPaths="$(build.artifactStagingDirectory)/coverage" /d:sonar.branch.name="$(Build.SourceBranchName)" /d:sonar.github.repository="$(Build.Repository.Name)" /d:sonar.github.oauth=$(GITHUB_KEY) /d:sonar.pullrequest.key="$(System.PullRequest.PullRequestId)" /d:sonar.pullrequest.provider="github"
      pwsh: true
    displayName: Scans project using SonarCloud on pull requests

  - task: DotNetCoreCLI@2
    name: dotnetBuild
    displayName: Building Projects
    inputs:
      command: build
      projects: src/*/*.*proj
      configuration: $(BuildConfiguration)
      versioningScheme: byEnvVar
      versionEnvVar: Version

  - task: DotNetCoreCLI@2
    name: dotnetTest
    displayName: Testing implementations
    inputs:
      command: test
      projects: 'tests/*/*.*proj'
      configuration: 'Debug'
      testRunTitle: 'Running tests'

  - task: PowerShell@2
    inputs:
      targetType: inline
      script: |
        ../dotnet-sonarscanner end /d:sonar.login="$(SONAR_APIKEY)"
      pwsh: true
    displayName: Uploads SonarCloud results

- job: Publishing
  pool:
    vmImage: ubuntu-latest
  dependsOn:
    - Setup
    - Building
    - Testing
  variables:
    Version: $[ dependencies.Setup.outputs['versioning.gitVersion'] ]
  steps:
  - checkout: none

  - task: DownloadPipelineArtifact@2
    displayName: Downloading artifact
    inputs:
      artifactName: 'nuget'
      targetPath: $(build.artifactStagingDirectory)/nuget

  - task: DotNetCoreCLI@2
    displayName: Pushing to nuget server
    inputs:
      workingDirectory: $(build.artifactStagingDirectory)/nuget
      command: 'custom'
      custom: nuget
      arguments: >
        push *.nupkg
        -s $(KritikosNuget)
        -k $(KritikosApiKey)
