trigger:
  branches:
    include:
      - master
      - develop
      - feature/*
      - bugfix/*

variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildPlatform: Any CPU
  BuildConfiguration: Release

jobs:
- job: Dependencies
  container: mcr.microsoft.com/dotnet/core/sdk:3.0-disco
  steps:
  # - task: UseDotNet@2
  #   displayName: Install .NET Core SDK 3
  #   inputs:
  #     packageType: sdk
  #     version: 3.0.100-preview7-012821
  #     includePreviewVersions: true
  #     installationPath: '$Pipeline.Workspace/.sdk'
  #     performMultiLevelLookup: true

  # - task: UseDotNet@2
  #   displayName: Install .NET Core SDK 2
  #   inputs:
  #     packageType: sdk
  #     version: 2.2.203

  - powershell: |
      dotnet tool install -g gitversion.tool
    displayName: Installing Global Tools

- job: Building
  pool:
    vmImage: ubuntu-latest
  dependsOn:
    - Dependencies
  container: mcr.microsoft.com/dotnet/core/sdk:3.0-disco
  steps:

  # - task: UseDotNet@2
  #   displayName: Install .NET Core SDK 3
  #   inputs:
  #     packageType: sdk
  #     version: 3.0.100-preview7-012821
  #     includePreviewVersions: true
  #     installationPath: '$Pipeline.Workspace/.sdk'
  #     performMultiLevelLookup: true

  - task: DotNetCoreCLI@2
    name: dotnetRestore
    displayName: Restoring nugets
    inputs:
      command: 'restore'
      arguments: -Project2ProjectTimeOut 20 --packages $Pipeline.Workspace/.nuget
      verbosityRestore: Normal

  - powershell: |
      $gitVersion = dotnet gitversion /output json /showvariable NugetVersion
      echo "##vso[task.setvariable variable=myOutputVar;isOutput=true]$gitVersion"
      echo "Environment version is: $Version"
      echo "Git version is: $gitVersion"
    name: versioning
    displayName: Setting version from git

  - task: DotNetCoreCLI@2
    name: dotnetBuild
    displayName: Building Projects
    inputs:
      command: build
      configuration: $(BuildConfiguration)
      arguments: --no-restore
      projects: src/*/*.csproj

- job: Testing
  pool:
    vmImage: ubuntu-latest
  dependsOn:
    - Dependencies

- job: Publishing
  pool:
    vmImage: ubuntu-latest
  dependsOn:
    - Building
    - Testing
  variables:
    Version: $[dependencies.Building.outputs['versioning.Version']]
  steps:
  - powershell: |
      echo "Version is: $Version"
